/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cognizant.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cognizant.entity.Dashboard;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Mono;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-02-25T09:06:38.313+05:30[Asia/Calcutta]")
@Api(value = "dashboard", description = "the dashboard API")
@CrossOrigin("http://localhost:3000")
public interface DashboardApi {

	Logger log = LoggerFactory.getLogger(DashboardApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Get Dashboard", nickname = "getDashboard", notes = "Get the Details of All Events", response = Dashboard.class, tags = {
			"Dashboard", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Dashboard.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/dashboard", produces = { "application/json" }, method = RequestMethod.GET)
	default Mono<ResponseEntity<Dashboard>> getDashboard() {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Mono.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"total_travel_hours\" : 1,\r\n  \"base_location\" : \"base_location\",\r\n  \"overall_volunteer_hours\" : 5,\r\n  \"poc_contact\" : 9,\r\n  \"total_volunteer_hours\" : 6,\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"project\" : \"project\",\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"event_id\" : \"event_id\",\r\n  \"total_no_of_volunteers\" : 0,\r\n  \"poc_name\" : \"poc_name\",\r\n  \"month\" : \"month\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"activity_type\" : 2,\r\n  \"venture_address\" : \"venture_address\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"category\" : \"category\",\r\n  \"status\" : \"status\",\r\n  \"poc_id\" : 7\r\n}, {\r\n  \"total_travel_hours\" : 1,\r\n  \"base_location\" : \"base_location\",\r\n  \"overall_volunteer_hours\" : 5,\r\n  \"poc_contact\" : 9,\r\n  \"total_volunteer_hours\" : 6,\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"project\" : \"project\",\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"event_id\" : \"event_id\",\r\n  \"total_no_of_volunteers\" : 0,\r\n  \"poc_name\" : \"poc_name\",\r\n  \"month\" : \"month\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"activity_type\" : 2,\r\n  \"venture_address\" : \"venture_address\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"category\" : \"category\",\r\n  \"status\" : \"status\",\r\n  \"poc_id\" : 7\r\n} ]",
							Dashboard.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DashboardApi interface so no example is generated");
		}
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get Dashboard", nickname = "getDashboard", notes = "Get the Details of All Events", response = Dashboard.class, tags = {
			"Dashboard", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Dashboard.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/dashboard/{userId}", produces = { "application/json" }, method = RequestMethod.GET)
	default Mono<ResponseEntity<Dashboard>> getDashboardUser(
			@ApiParam(value = "", required = true) @PathVariable("userId") String userId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Mono.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"total_travel_hours\" : 1,\r\n  \"base_location\" : \"base_location\",\r\n  \"overall_volunteer_hours\" : 5,\r\n  \"poc_contact\" : 9,\r\n  \"total_volunteer_hours\" : 6,\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"project\" : \"project\",\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"event_id\" : \"event_id\",\r\n  \"total_no_of_volunteers\" : 0,\r\n  \"poc_name\" : \"poc_name\",\r\n  \"month\" : \"month\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"activity_type\" : 2,\r\n  \"venture_address\" : \"venture_address\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"category\" : \"category\",\r\n  \"status\" : \"status\",\r\n  \"poc_id\" : 7\r\n}, {\r\n  \"total_travel_hours\" : 1,\r\n  \"base_location\" : \"base_location\",\r\n  \"overall_volunteer_hours\" : 5,\r\n  \"poc_contact\" : 9,\r\n  \"total_volunteer_hours\" : 6,\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"project\" : \"project\",\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"event_id\" : \"event_id\",\r\n  \"total_no_of_volunteers\" : 0,\r\n  \"poc_name\" : \"poc_name\",\r\n  \"month\" : \"month\",\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"activity_type\" : 2,\r\n  \"venture_address\" : \"venture_address\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"category\" : \"category\",\r\n  \"status\" : \"status\",\r\n  \"poc_id\" : 7\r\n} ]",
							Dashboard.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Mono.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default DashboardApi interface so no example is generated");
		}
		return Mono.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

}
