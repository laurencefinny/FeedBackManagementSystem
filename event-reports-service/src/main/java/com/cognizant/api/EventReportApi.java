/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cognizant.api;

import java.io.IOException;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cognizant.model.EventReport;
import com.fasterxml.jackson.databind.ObjectMapper;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import reactor.core.publisher.Flux;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-02-25T09:06:38.313+05:30[Asia/Calcutta]")
@Api(value = "eventReport", description = "the eventReport API")
@CrossOrigin("http://localhost:3000")
public interface EventReportApi {

	Logger log = LoggerFactory.getLogger(EventReportApi.class);

	default Optional<ObjectMapper> getObjectMapper() {
		return Optional.empty();
	}

	default Optional<HttpServletRequest> getRequest() {
		return Optional.empty();
	}

	default Optional<String> getAcceptHeader() {
		return getRequest().map(r -> r.getHeader("Accept"));
	}

	@ApiOperation(value = "Add Event Report", nickname = "addEventReport", notes = "Add the Event Information to Database", response = EventReport.class, tags = {
			"EventReport", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = EventReport.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/eventReport", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	default Flux<ResponseEntity<EventReport>> addEventReport(
			@ApiParam(value = "", required = true) @Valid @RequestBody EventReport body) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n}",
							EventReport.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EventReportApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@SuppressWarnings("unchecked")
	@ApiOperation(value = "Get Event Report", nickname = "getAllEventReport", notes = "Get the Details of All Event Reports", response = EventReport.class, responseContainer = "List", tags = {
			"EventReport", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = EventReport.class, responseContainer = "List"),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/eventReport", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<EventReport>> getAllEventReport() {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"[ {\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n}, {\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n} ]",
							EventReport.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EventReportApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get Event Report by Id", nickname = "getEventReportById", notes = "Provide an Id to look up for specific event Report", response = EventReport.class, tags = {
			"EventReport", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = EventReport.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/eventReport/{eventReportId}", produces = {
			"application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<EventReport>> getEventReportById(
			@ApiParam(value = "", required = true) @PathVariable("eventReportId") String eventReportId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n}",
							EventReport.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EventReportApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get Event Report by Id", nickname = "getEventReportById", notes = "Provide an Id to look up for specific event Report", response = EventReport.class, tags = {
			"EventReport", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = EventReport.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/getUser", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<EventReport>> getUser() {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n}",
							EventReport.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EventReportApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}

	@ApiOperation(value = "Get Event Report by Id", nickname = "getEventReportById", notes = "Provide an Id to look up for specific event Report", response = EventReport.class, tags = {
			"EventReport", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = EventReport.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/eventReport-empId/{empId}", produces = { "application/json" }, method = RequestMethod.GET)
	default Flux<ResponseEntity<EventReport>> getEventReportByEmpId(
			@ApiParam(value = "", required = true) @PathVariable("empId") String empId) {
		if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
			if (getAcceptHeader().get().contains("application/json")) {
				try {
					return Flux.just(new ResponseEntity<>(getObjectMapper().get().readValue(
							"{\r\n  \"base_location\" : \"base_location\",\r\n  \"event_description\" : \"event_description\",\r\n  \"lives_impacted\" : 5,\r\n  \"employee_name\" : \"employee_name\",\r\n  \"iiep_category\" : \"iiep_category\",\r\n  \"volunteer_hours\" : 6,\r\n  \"beneficiary_name\" : \"beneficiary_name\",\r\n  \"buisness_unit\" : \"buisness_unit\",\r\n  \"event_id\" : \"event_id\",\r\n  \"employee_id\" : 0,\r\n  \"event_date\" : \"2000-01-23\",\r\n  \"council_name\" : \"council_name\",\r\n  \"event_name\" : \"event_name\",\r\n  \"travel_hours\" : 1,\r\n  \"status\" : \"status\"\r\n}",
							EventReport.class), HttpStatus.NOT_IMPLEMENTED));
				} catch (IOException e) {
					log.error("Couldn't serialize response for content type application/json", e);
					return Flux.just(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));
				}
			}
		} else {
			log.warn(
					"ObjectMapper or HttpServletRequest not configured in default EventReportApi interface so no example is generated");
		}
		return Flux.just(new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED));
	}
}
